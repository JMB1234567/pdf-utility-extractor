{\rtf1\ansi\ansicpg1252\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;\f1\fnil\fcharset0 .AppleSystemUIFontMonospaced-Light;\f2\fnil\fcharset0 .AppleSystemUIFontMonospaced-LightItalic;
}
{\colortbl;\red255\green255\blue255;\red117\green66\blue151;\red60\green60\blue59;\red95\green124\blue3;
\red240\green115\blue25;\red123\green126\blue121;}
{\*\expandedcolortbl;;\cssrgb\c53725\c34902\c65882;\cssrgb\c30196\c30196\c29804;\cssrgb\c44314\c54902\c0;
\cssrgb\c96078\c52941\c12157;\cssrgb\c55686\c56471\c54902;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 from
\f1 \cf3 \strokec3  fastapi 
\f0 \cf2 \strokec2 import
\f1 \cf3 \strokec3  FastAPI, File, UploadFile, HTTPException\

\f0 \cf2 \strokec2 from
\f1 \cf3 \strokec3  fastapi.staticfiles 
\f0 \cf2 \strokec2 import
\f1 \cf3 \strokec3  StaticFiles\

\f0 \cf2 \strokec2 from
\f1 \cf3 \strokec3  fastapi.responses 
\f0 \cf2 \strokec2 import
\f1 \cf3 \strokec3  FileResponse\

\f0 \cf2 \strokec2 import
\f1 \cf3 \strokec3  fitz\

\f0 \cf2 \strokec2 import
\f1 \cf3 \strokec3  pandas 
\f0 \cf2 \strokec2 as
\f1 \cf3 \strokec3  pd\

\f0 \cf2 \strokec2 from
\f1 \cf3 \strokec3  pathlib 
\f0 \cf2 \strokec2 import
\f1 \cf3 \strokec3  Path\

\f0 \cf2 \strokec2 import
\f1 \cf3 \strokec3  os\

\f0 \cf2 \strokec2 from
\f1 \cf3 \strokec3  transformers 
\f0 \cf2 \strokec2 import
\f1 \cf3 \strokec3  pipeline\

\f0 \cf2 \strokec2 from
\f1 \cf3 \strokec3  datetime 
\f0 \cf2 \strokec2 import
\f1 \cf3 \strokec3  datetime\

\f0 \cf2 \strokec2 import
\f1 \cf3 \strokec3  json\
\
app = FastAPI()\
app.mount(\cf4 \strokec4 "/static"\cf3 \strokec3 , StaticFiles(directory=\cf4 \strokec4 "static"\cf3 \strokec3 ), name=\cf4 \strokec4 "static"\cf3 \strokec3 )\
\
@app.post(\cf4 \strokec4 "/upload/"\cf3 \strokec3 )\

\f0 \cf2 \strokec2 async
\f1 \cf3 \strokec3  
\f0 \cf2 \strokec2 def
\f1 \cf3 \strokec3  upload_file(\cf5 \strokec5 file\cf3 \strokec3 : UploadFile = File(...)):\
    
\f2\i \cf6 \strokec6 # Save uploaded PDF temporarily
\f1\i0 \cf3 \strokec3 \
    pdf_path = \cf4 \strokec4 f"temp_\cf3 \strokec3 \{\cf5 \strokec5 file\cf3 \strokec3 .filename\}\cf4 \strokec4 "\cf3 \strokec3 \
    
\f0 \cf2 \strokec2 with
\f1 \cf3 \strokec3  \cf5 \strokec5 open\cf3 \strokec3 (pdf_path, \cf4 \strokec4 "wb"\cf3 \strokec3 ) 
\f0 \cf2 \strokec2 as
\f1 \cf3 \strokec3  pdf_file:\
        pdf_file.write(
\f0 \cf2 \strokec2 await
\f1 \cf3 \strokec3  \cf5 \strokec5 file\cf3 \strokec3 .read())\
    \
    
\f2\i \cf6 \strokec6 # Extract text from PDF
\f1\i0 \cf3 \strokec3 \
    doc = fitz.\cf5 \strokec5 open\cf3 \strokec3 (pdf_path)\
    text = \cf4 \strokec4 ""\cf3 \strokec3 \
    
\f0 \cf2 \strokec2 for
\f1 \cf3 \strokec3  page 
\f0 \cf2 \strokec2 in
\f1 \cf3 \strokec3  doc:\
        text += page.get_text()\
    doc.close()\
    \
    
\f2\i \cf6 \strokec6 # Initialize the free model
\f1\i0 \cf3 \strokec3 \
    extractor = pipeline(\cf4 \strokec4 "text2text-generation"\cf3 \strokec3 , \
                        model=\cf4 \strokec4 "facebook/bart-large-cnn"\cf3 \strokec3 )\
    \
    
\f2\i \cf6 \strokec6 # Extract company and customer info
\f1\i0 \cf3 \strokec3 \
    info_prompt = \cf4 \strokec4 f"Extract utility company name and customer name from: \cf3 \strokec3 \{text[:1000]\}\cf4 \strokec4 "\cf3 \strokec3 \
    basic_info = extractor(info_prompt, \
                          max_length=\cf5 \strokec5 100\cf3 \strokec3 , \
                          min_length=\cf5 \strokec5 30\cf3 \strokec3 , \
                          do_sample=False)[\cf5 \strokec5 0\cf3 \strokec3 ][\cf4 \strokec4 'generated_text'\cf3 \strokec3 ]\
    \
    
\f2\i \cf6 \strokec6 # Extract monthly data
\f1\i0 \cf3 \strokec3 \
    monthly_prompt = \cf4 \strokec4 f"Extract monthly consumption and cost for the last 12 months from: \cf3 \strokec3 \{text\}\cf4 \strokec4 "\cf3 \strokec3 \
    monthly_data = extractor(monthly_prompt, \
                            max_length=\cf5 \strokec5 500\cf3 \strokec3 , \
                            min_length=\cf5 \strokec5 100\cf3 \strokec3 , \
                            do_sample=False)[\cf5 \strokec5 0\cf3 \strokec3 ][\cf4 \strokec4 'generated_text'\cf3 \strokec3 ]\
    \
    
\f0 \cf2 \strokec2 try
\f1 \cf3 \strokec3 :\
        
\f2\i \cf6 \strokec6 # Parse the extracted data
\f1\i0 \cf3 \strokec3 \
        company_name = basic_info.split(\cf4 \strokec4 'Company:'\cf3 \strokec3 )[\cf5 \strokec5 1\cf3 \strokec3 ].split(\cf4 \strokec4 '\\n'\cf3 \strokec3 )[\cf5 \strokec5 0\cf3 \strokec3 ].strip()\
        customer_name = basic_info.split(\cf4 \strokec4 'Customer:'\cf3 \strokec3 )[\cf5 \strokec5 1\cf3 \strokec3 ].split(\cf4 \strokec4 '\\n'\cf3 \strokec3 )[\cf5 \strokec5 0\cf3 \strokec3 ].strip()\
        \
        
\f2\i \cf6 \strokec6 # Create monthly data structure
\f1\i0 \cf3 \strokec3 \
        months_data = []\
        lines = monthly_data.split(\cf4 \strokec4 '\\n'\cf3 \strokec3 )\
        total_consumption = \cf5 \strokec5 0\cf3 \strokec3 \
        total_cost = \cf5 \strokec5 0\cf3 \strokec3 \
        \
        
\f0 \cf2 \strokec2 for
\f1 \cf3 \strokec3  line 
\f0 \cf2 \strokec2 in
\f1 \cf3 \strokec3  lines:\
            
\f0 \cf2 \strokec2 if
\f1 \cf3 \strokec3  \cf4 \strokec4 'Month:'\cf3 \strokec3  
\f0 \cf2 \strokec2 in
\f1 \cf3 \strokec3  line:\
                month_info = line.split(\cf4 \strokec4 ','\cf3 \strokec3 )\
                month_data = \{\
                    \cf4 \strokec4 'Month'\cf3 \strokec3 : month_info[\cf5 \strokec5 0\cf3 \strokec3 ].split(\cf4 \strokec4 ':'\cf3 \strokec3 )[\cf5 \strokec5 1\cf3 \strokec3 ].strip(),\
                    \cf4 \strokec4 'Consumption'\cf3 \strokec3 : \cf5 \strokec5 float\cf3 \strokec3 (month_info[\cf5 \strokec5 1\cf3 \strokec3 ].split(\cf4 \strokec4 ':'\cf3 \strokec3 )[\cf5 \strokec5 1\cf3 \strokec3 ].strip()),\
                    \cf4 \strokec4 'Cost'\cf3 \strokec3 : \cf5 \strokec5 float\cf3 \strokec3 (month_info[\cf5 \strokec5 2\cf3 \strokec3 ].split(\cf4 \strokec4 ':'\cf3 \strokec3 )[\cf5 \strokec5 1\cf3 \strokec3 ].strip().replace(\cf4 \strokec4 '$'\cf3 \strokec3 , \cf4 \strokec4 ''\cf3 \strokec3 ))\
                \}\
                months_data.append(month_data)\
                total_consumption += month_data[\cf4 \strokec4 'Consumption'\cf3 \strokec3 ]\
                total_cost += month_data[\cf4 \strokec4 'Cost'\cf3 \strokec3 ]\
        \
        
\f2\i \cf6 \strokec6 # Create Excel file
\f1\i0 \cf3 \strokec3 \
        df = pd.DataFrame(months_data)\
        \
        
\f2\i \cf6 \strokec6 # Create Excel writer object
\f1\i0 \cf3 \strokec3 \
        excel_path = \cf4 \strokec4 "utility_data.xlsx"\cf3 \strokec3 \
        writer = pd.ExcelWriter(excel_path, engine=\cf4 \strokec4 'xlsxwriter'\cf3 \strokec3 )\
        \
        
\f2\i \cf6 \strokec6 # Write basic info
\f1\i0 \cf3 \strokec3 \
        info_df = pd.DataFrame(\{\
            \cf4 \strokec4 'Utility Company'\cf3 \strokec3 : [company_name],\
            \cf4 \strokec4 'Customer Name'\cf3 \strokec3 : [customer_name]\
        \})\
        info_df.to_excel(writer, sheet_name=\cf4 \strokec4 'Utility Data'\cf3 \strokec3 , index=False)\
        \
        
\f2\i \cf6 \strokec6 # Write monthly data
\f1\i0 \cf3 \strokec3 \
        df.to_excel(writer, sheet_name=\cf4 \strokec4 'Utility Data'\cf3 \strokec3 , startrow=\cf5 \strokec5 3\cf3 \strokec3 , index=False)\
        \
        
\f2\i \cf6 \strokec6 # Write totals
\f1\i0 \cf3 \strokec3 \
        totals_df = pd.DataFrame(\{\
            \cf4 \strokec4 'Total Consumption'\cf3 \strokec3 : [total_consumption],\
            \cf4 \strokec4 'Total Cost'\cf3 \strokec3 : [\cf4 \strokec4 f'$\cf3 \strokec3 \{total_cost:.2f\}\cf4 \strokec4 '\cf3 \strokec3 ]\
        \})\
        totals_df.to_excel(writer, sheet_name=\cf4 \strokec4 'Utility Data'\cf3 \strokec3 , \
                          startrow=\cf5 \strokec5 len\cf3 \strokec3 (months_data)+\cf5 \strokec5 5\cf3 \strokec3 , index=False)\
        \
        
\f2\i \cf6 \strokec6 # Save and close
\f1\i0 \cf3 \strokec3 \
        writer.close()\
        \
        
\f2\i \cf6 \strokec6 # Clean up
\f1\i0 \cf3 \strokec3 \
        os.remove(pdf_path)\
        \
        
\f0 \cf2 \strokec2 return
\f1 \cf3 \strokec3  FileResponse(excel_path, filename=\cf4 \strokec4 "utility_data.xlsx"\cf3 \strokec3 )\
        \
    
\f0 \cf2 \strokec2 except
\f1 \cf3 \strokec3  Exception 
\f0 \cf2 \strokec2 as
\f1 \cf3 \strokec3  e:\
        
\f0 \cf2 \strokec2 raise
\f1 \cf3 \strokec3  HTTPException(status_code=\cf5 \strokec5 500\cf3 \strokec3 , \
                          detail=\cf4 \strokec4 f"Error processing PDF: \cf3 \strokec3 \{\cf5 \strokec5 str\cf3 \strokec3 (e)\}\cf4 \strokec4 "\cf3 \strokec3 )\
\
@app.get(\cf4 \strokec4 "/"\cf3 \strokec3 )\

\f0 \cf2 \strokec2 async
\f1 \cf3 \strokec3  
\f0 \cf2 \strokec2 def
\f1 \cf3 \strokec3  read_root():\
    
\f0 \cf2 \strokec2 return
\f1 \cf3 \strokec3  FileResponse(\cf4 \strokec4 "static/index.html"\cf3 \strokec3 )}